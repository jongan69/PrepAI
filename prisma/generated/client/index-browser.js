
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkId: 'clerkId',
  name: 'name',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HealthProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  height: 'height',
  weight: 'weight',
  age: 'age',
  gender: 'gender',
  birthday: 'birthday',
  targetWeight: 'targetWeight',
  targetCalories: 'targetCalories',
  targetWaterL: 'targetWaterL',
  activityLevel: 'activityLevel',
  fitnessGoal: 'fitnessGoal',
  heightUnit: 'heightUnit',
  weightUnit: 'weightUnit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.WorkoutScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  category: 'category',
  durationMin: 'durationMin',
  calories: 'calories',
  date: 'date',
  notes: 'notes',
  isCompleted: 'isCompleted',
  totalTime: 'totalTime',
  restTime: 'restTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  workoutId: 'workoutId',
  name: 'name',
  sets: 'sets',
  reps: 'reps',
  weightKg: 'weightKg',
  duration: 'duration',
  distance: 'distance',
  restTime: 'restTime',
  order: 'order',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.MealScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  mealType: 'mealType',
  calories: 'calories',
  protein: 'protein',
  carbs: 'carbs',
  fat: 'fat',
  date: 'date',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.MealItemScalarFieldEnum = {
  id: 'id',
  mealId: 'mealId',
  userId: 'userId',
  name: 'name',
  calories: 'calories',
  protein: 'protein',
  carbs: 'carbs',
  fat: 'fat',
  quantity: 'quantity',
  unit: 'unit',
  isHighInProtein: 'isHighInProtein',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.ProgressLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  waterL: 'waterL',
  sleepHrs: 'sleepHrs',
  mood: 'mood',
  weightKg: 'weightKg',
  steps: 'steps',
  activeMinutes: 'activeMinutes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.WeightEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  weightKg: 'weightKg',
  date: 'date',
  photo: 'photo',
  notes: 'notes',
  bodyFatPercentage: 'bodyFatPercentage',
  muscleMassKg: 'muscleMassKg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.WaterIntakeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amountMl: 'amountMl',
  date: 'date',
  time: 'time',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.SleepEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  hours: 'hours',
  quality: 'quality',
  date: 'date',
  bedtime: 'bedtime',
  wakeTime: 'wakeTime',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  target: 'target',
  current: 'current',
  unit: 'unit',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  HealthProfile: 'HealthProfile',
  Workout: 'Workout',
  Exercise: 'Exercise',
  Meal: 'Meal',
  MealItem: 'MealItem',
  ProgressLog: 'ProgressLog',
  WeightEntry: 'WeightEntry',
  WaterIntake: 'WaterIntake',
  SleepEntry: 'SleepEntry',
  Goal: 'Goal'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
