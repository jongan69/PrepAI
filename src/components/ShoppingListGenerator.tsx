import React, { useState } from 'react';
import { View, Pressable, Text, ScrollView, Alert, Share } from 'react-native';
import { BlurView } from 'expo-blur';
import ThemedText from './ThemedText';
import Icon from './Icon';
import useThemeColors from '@/contexts/ThemeColors';
import { shadowPresets } from '@/utils/useShadow';

interface ShoppingItem {
  id: string;
  name: string;
  quantity: string;
  unit: string;
  category: string;
  price?: number;
  store?: string;
  isOptional?: boolean;
  isPurchased?: boolean;
}

interface ShoppingListGeneratorProps {
  ingredients?: string[];
  mealPlan?: any;
  onListGenerated?: (items: ShoppingItem[]) => void;
  className?: string;
}

export default function ShoppingListGenerator({
  ingredients = [],
  mealPlan,
  onListGenerated,
  className = '',
}: ShoppingListGeneratorProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [shoppingList, setShoppingList] = useState<ShoppingItem[]>([]);
  const [showPrices, setShowPrices] = useState(false);
  const colors = useThemeColors();

  const generateShoppingList = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/recipes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'generate-shopping-list',
          ingredients,
          mealPlan,
          includePricing: showPrices,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to generate shopping list');
      }

      if (result.success && result.shoppingList) {
        const formattedItems: ShoppingItem[] = result.shoppingList.map((item: any, index: number) => ({
          id: `item_${index}_${Date.now()}`,
          name: item.name || item.ingredient,
          quantity: item.quantity || '1',
          unit: item.unit || 'piece',
          category: item.category || 'other',
          price: item.price,
          store: item.store,
          isOptional: item.isOptional || false,
          isPurchased: false,
        }));

        setShoppingList(formattedItems);
        onListGenerated?.(formattedItems);
        Alert.alert('Shopping List Generated!', `Found ${formattedItems.length} items for your meal plan.`);
      } else {
        throw new Error('No shopping list generated');
      }
    } catch (error) {
      console.error('Shopping list generation error:', error);
      Alert.alert(
        'Error',
        `Failed to generate shopping list: ${error instanceof Error ? error.message : 'Unknown error'}`
      );
    } finally {
      setIsLoading(false);
    }
  };

  const toggleItemPurchased = (itemId: string) => {
    setShoppingList((prev) =>
      prev.map((item) => (item.id === itemId ? { ...item, isPurchased: !item.isPurchased } : item))
    );
  };

  const shareShoppingList = async () => {
    const listText = shoppingList
      .filter((item) => !item.isPurchased)
      .map((item) => `• ${item.quantity} ${item.unit} ${item.name}${item.price ? ` - $${item.price.toFixed(2)}` : ''}`)
      .join('\n');

    const totalPrice = shoppingList
      .filter((item) => !item.isPurchased && item.price)
      .reduce((total, item) => total + (item.price || 0), 0);

    const shareContent = `🛒 Shopping List\n\n${listText}${totalPrice > 0 ? `\n\nEstimated Total: $${totalPrice.toFixed(2)}` : ''}\n\nGenerated by PrepAI`;

    try {
      await Share.share({
        message: shareContent,
        title: 'PrepAI Shopping List',
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  const getItemsByCategory = () => {
    const categories: { [key: string]: ShoppingItem[] } = {};
    shoppingList.forEach((item) => {
      if (!categories[item.category]) {
        categories[item.category] = [];
      }
      categories[item.category].push(item);
    });
    return categories;
  };

  const getCategoryIcon = (category: string) => {
    const iconMap: { [key: string]: string } = {
      produce: 'Apple',
      dairy: 'Milk',
      meat: 'Beef',
      pantry: 'Package',
      frozen: 'Snowflake',
      bakery: 'Croissant',
      beverages: 'Coffee',
      other: 'ShoppingCart',
    };
    return iconMap[category] || 'ShoppingCart';
  };

  const remainingItems = shoppingList.filter((item) => !item.isPurchased).length;
  const totalItems = shoppingList.length;
  const completionPercentage = totalItems > 0 ? Math.round(((totalItems - remainingItems) / totalItems) * 100) : 0;

  return (
    <View
      className={`rounded-xl bg-secondary ${className}`}
      style={shadowPresets.medium}>
      <View className="p-6">
        <View className="mb-6 flex-row items-center">
          <View className="mr-3 h-10 w-10 items-center justify-center rounded-lg bg-blue-500">
            <Icon
              name="ShoppingCart"
              size={20}
              color="white"
            />
          </View>
          <View className="flex-1">
            <ThemedText className="text-lg font-bold">Smart Shopping List</ThemedText>
            <ThemedText className="text-sm opacity-70">
              Generate shopping lists with pricing from your meal plans
            </ThemedText>
          </View>
        </View>

        {ingredients.length > 0 && (
          <View className="mb-4 rounded-lg bg-background p-3">
            <ThemedText className="mb-2 text-sm font-semibold">Ingredients Available:</ThemedText>
            <View className="flex-row flex-wrap">
              {ingredients.slice(0, 6).map((ingredient, index) => (
                <View
                  key={index}
                  className="mb-2 mr-2 rounded-full bg-green-500/20 px-3 py-1">
                  <ThemedText className="text-xs text-green-700">{ingredient}</ThemedText>
                </View>
              ))}
              {ingredients.length > 6 && (
                <View className="mb-2 rounded-full bg-gray-500/20 px-3 py-1">
                  <ThemedText className="text-xs">+{ingredients.length - 6} more</ThemedText>
                </View>
              )}
            </View>
          </View>
        )}

        <View className="mb-4 flex-row items-center justify-between">
          <View className="flex-row items-center">
            <Pressable
              onPress={() => setShowPrices(!showPrices)}
              className={`mr-3 flex-row items-center rounded-lg px-3 py-2 ${
                showPrices ? 'bg-blue-500' : 'bg-background'
              }`}>
              <Icon
                name="DollarSign"
                size={16}
                className={`mr-2 ${showPrices ? 'text-white' : ''}`}
                color={showPrices ? 'white' : colors.text}
              />
              <ThemedText className={`text-sm ${showPrices ? 'text-white' : ''}`}>Include Prices</ThemedText>
            </Pressable>
          </View>
        </View>

        {isLoading && (
          <View className="mb-4">
            <BlurView
              intensity={50}
              className="rounded-lg p-4">
              <View className="flex-row items-center">
                <View className="mr-3 h-6 w-6 animate-spin rounded-full border-2 border-blue-500 border-t-transparent" />
                <ThemedText className="text-sm">Generating shopping list with Kroger pricing...</ThemedText>
              </View>
            </BlurView>
          </View>
        )}

        {shoppingList.length === 0 ? (
          <Pressable
            onPress={generateShoppingList}
            disabled={isLoading}
            className={`flex-row items-center justify-center rounded-lg bg-blue-500 p-4 ${
              isLoading ? 'opacity-50' : ''
            }`}>
            <Icon
              name={isLoading ? 'Loader2' : 'ListPlus'}
              size={20}
              color="white"
              className={isLoading ? 'animate-spin' : ''}
            />
            <Text className="ml-2 font-semibold text-white">
              {isLoading ? 'Generating...' : 'Generate Shopping List'}
            </Text>
          </Pressable>
        ) : (
          <View>
            {/* Progress Header */}
            <View className="mb-4 rounded-lg bg-background p-4">
              <View className="mb-2 flex-row items-center justify-between">
                <ThemedText className="font-semibold">Shopping Progress</ThemedText>
                <ThemedText className="text-sm opacity-70">{completionPercentage}% Complete</ThemedText>
              </View>
              <View className="h-2 rounded-full bg-border">
                <View
                  className="h-full rounded-full bg-green-500"
                  style={{ width: `${completionPercentage}%` }}
                />
              </View>
              <View className="mt-2 flex-row justify-between">
                <ThemedText className="text-sm opacity-70">{remainingItems} items remaining</ThemedText>
                <Pressable onPress={shareShoppingList}>
                  <Icon
                    name="Share"
                    size={16}
                    className="opacity-70"
                  />
                </Pressable>
              </View>
            </View>

            {/* Shopping List by Category */}
            <ScrollView
              className="max-h-96"
              showsVerticalScrollIndicator={false}>
              {Object.entries(getItemsByCategory()).map(([category, items]) => (
                <View
                  key={category}
                  className="mb-4">
                  <View className="mb-2 flex-row items-center">
                    <Icon
                      name={getCategoryIcon(category)}
                      size={18}
                      className="mr-2 opacity-70"
                    />
                    <ThemedText className="font-semibold capitalize">
                      {category} ({items.length})
                    </ThemedText>
                  </View>
                  {items.map((item) => (
                    <Pressable
                      key={item.id}
                      onPress={() => toggleItemPurchased(item.id)}
                      className={`mb-2 flex-row items-center rounded-lg bg-background p-3 ${
                        item.isPurchased ? 'opacity-50' : ''
                      }`}>
                      <View className="mr-3">
                        <Icon
                          name={item.isPurchased ? 'CheckCircle2' : 'Circle'}
                          size={20}
                          color={item.isPurchased ? '#10B981' : colors.text}
                        />
                      </View>
                      <View className="flex-1">
                        <View className="flex-row items-center">
                          <ThemedText className={`font-medium ${item.isPurchased ? 'line-through' : ''}`}>
                            {item.quantity} {item.unit} {item.name}
                          </ThemedText>
                          {item.isOptional && (
                            <View className="ml-2 rounded bg-yellow-500/20 px-2 py-1">
                              <ThemedText className="text-xs text-yellow-700">Optional</ThemedText>
                            </View>
                          )}
                        </View>
                        {item.price && (
                          <ThemedText className="text-sm opacity-70">
                            ${item.price.toFixed(2)}
                            {item.store ? ` at ${item.store}` : ''}
                          </ThemedText>
                        )}
                      </View>
                    </Pressable>
                  ))}
                </View>
              ))}
            </ScrollView>

            <Pressable
              onPress={generateShoppingList}
              className="mt-4 flex-row items-center justify-center rounded-lg bg-blue-500/20 p-3">
              <Icon
                name="RotateCcw"
                size={16}
                className="mr-2 text-blue-600"
              />
              <ThemedText className="text-sm font-medium text-blue-600">Regenerate List</ThemedText>
            </Pressable>
          </View>
        )}

        <View className="mt-4 rounded-lg bg-background p-3">
          <ThemedText className="text-xs opacity-60">
            🏪 Shopping lists are generated with real-time pricing from Kroger. Prices may vary by location and
            availability.
          </ThemedText>
        </View>
      </View>
    </View>
  );
}
